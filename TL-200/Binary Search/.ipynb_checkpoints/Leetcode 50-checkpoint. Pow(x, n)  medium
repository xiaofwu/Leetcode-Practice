{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c99035e3",
   "metadata": {},
   "source": [
    "50. Pow(x, n) medium\n",
    "Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).\n",
    "Input: x = 2.00000, n = 10        Output: 1024.00000\n",
    "Input: x = 2.00000, n = -2        Output: 0.25000       Explanation: 2^-2 = 1/2^2 = 1/4 = 0.25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea11608f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Solution:\n",
    "    def myPow(self, x: float, n: int) -> float:\n",
    "        \"\"\"\n",
    "        :type x: float\n",
    "        :type n: int\n",
    "        :rtype: float\n",
    "        \"\"\"\n",
    "        # key is to reduce the recursion cycle \n",
    "        if x == 1 or n == 0:\n",
    "            return 1        \n",
    "        elif n < 0:\n",
    "            return self.myPow(1/x, -n)\n",
    "        elif n % 2 == 0:\n",
    "            return self.myPow(x, n//2)**2\n",
    "        else:\n",
    "            return x * self.myPow(x, (n-1)//2)**2\n",
    "            "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
